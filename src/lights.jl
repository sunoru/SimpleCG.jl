using LocalMemoize

abstract type Light end

const Lights = Vector{Light}

struct LightSample
    light_vector::Vector3
    irradiance::ColorRGB
end
zero(::Type{LightSample}) = LightSample(zero(Vector3), Black)
InShadow() = zero(LightSample)
in_shadow(ls::LightSample) = ls.light_vector == zero(Vector3)

function shadow_test(ùê•::Vector3, position::Vector3, scene::Geometry, r::Float64=‚àû)
    shadow_ray = Ray3(position, ùê•)
    shadow_result = shadow_ray ‚à© scene
    hit(shadow_result) && shadow_result.value.distance <= r
end

struct DirectionalLight <: Light
    irradiance::ColorRGB
    direction::Vector3
    shadow::Bool
end
DirectionalLight(irradiance, direction) = DirectionalLight(irradiance, direction, true)
@memoize get_ùê•(dl::DirectionalLight) = -normalize(dl.direction)

function sample(@memo(dl::DirectionalLight), scene::Geometry, position::Vector3)
    ùê• = get_ùê•(dl)
    if dl.shadow && shadow_test(ùê•, position, scene)
        return InShadow()
    end
    LightSample(ùê•, dl.irradiance)
end

struct PointLight <: Light
    intensity::ColorRGB
    position::Vector3
    shadow::Bool
end
PointLight(intensity, position) = PointLight(intensity, position, true)

function sample(pl::PointLight, scene::Geometry, position::Vector3)
    Œîr = pl.position - position
    r¬≤ = norm¬≤(Œîr)
    r = ‚àör¬≤
    ùê• = Œîr / r
    if pl.shadow && shadow_test(ùê•, position, scene, r)
        return InShadow()
    end
    LightSample(ùê•, pl.intensity / r¬≤)
end

struct SpotLight <: Light
    intensity::ColorRGB
    position::Vector3
    direction::Vector3
    Œ∏::Float64
    œï::Float64
    falloff::Float64
    shadow::Bool
end
SpotLight(intensity, position, direction, Œ∏, œï, falloff) = SpotLight(
    intensity, position, direction, Œ∏, œï, falloff, true)

@memoize function sample(@memo(sl::SpotLight), scene::Geometry, position::Vector3)
    @memo ùê¨ = -normalize(sl.direction)
    @memo cosŒ∏ = cos(sl.Œ∏ / 2)
    @memo cosœï = cos(sl.œï / 2)
    @memo base_multiplier = 1 / (cosŒ∏ - cosœï)
    Œîr = sl.position - position
    r¬≤ = norm¬≤(Œîr)
    r = ‚àör¬≤
    ùê• = Œîr / r
    if sl.shadow && shadow_test(ùê•, position, scene, r)
        return InShadow()
    end
    sdotl = ùê¨ ‚ãÖ ùê• 
    if sdotl >= cosŒ∏
        spot = 1.0
    elseif sdotl <= cosœï
        spot = 0.0
    else
        spot = ((sdotl - cosœï) * base_multiplier) ^ sl.falloff
    end
    LightSample(ùê•, sl.intensity * spot / r¬≤)
end